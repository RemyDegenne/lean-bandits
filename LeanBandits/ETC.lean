/-
Copyright (c) 2025 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import Mathlib.Probability.Moments.SubGaussian
import LeanBandits.AlgorithmBuilding
import LeanBandits.ForMathlib.SubGaussian
import LeanBandits.Regret
import LeanBandits.RewardByCountMeasure

/-! # The Explore-Then-Commit Algorithm

-/

open MeasureTheory ProbabilityTheory Finset Learning
open scoped ENNReal NNReal

namespace Bandits

variable {K : ‚Ñï}

/-- Arm pulled by the ETC algorithm at time `n + 1`. -/
noncomputable
def ETC.nextArm (hK : 0 < K) (m n : ‚Ñï) (h : Iic n ‚Üí Fin K √ó ‚Ñù) : Fin K :=
  have : Nonempty (Fin K) := Fin.pos_iff_nonempty.mp hK
  if hn : n < K * m - 1 then
    ‚ü®(n + 1) % K, Nat.mod_lt _ hK‚ü© -- for `n = 0` we have pulled arm 0 already, and we pull arm 1
  else
    if hn_eq : n = K * m - 1 then measurableArgmax (empMean' n) h
    else (h ‚ü®n, by simp‚ü©).1

@[fun_prop]
lemma ETC.measurable_nextArm (hK : 0 < K) (m n : ‚Ñï) : Measurable (nextArm hK m n) := by
  have : Nonempty (Fin K) := Fin.pos_iff_nonempty.mp hK
  unfold nextArm
  simp only [dite_eq_ite]
  refine Measurable.ite (by simp) (by fun_prop) ?_
  refine Measurable.ite (by simp) ?_ (by fun_prop)
  exact measurable_measurableArgmax fun a ‚Ü¶ by fun_prop

/-- The Explore-Then-Commit algorithm. -/
noncomputable
def etcAlgorithm (hK : 0 < K) (m : ‚Ñï) : Algorithm (Fin K) ‚Ñù :=
  detAlgorithm (ETC.nextArm hK m) (by fun_prop) ‚ü®0, hK‚ü©

namespace ETC

variable {hK : 0 < K} {m : ‚Ñï} {ŒΩ : Kernel (Fin K) ‚Ñù} [IsMarkovKernel ŒΩ]

local notation "ùîìt" => Bandit.trajMeasure (etcAlgorithm hK m) ŒΩ
local notation "ùîì" => Bandit.measure (etcAlgorithm hK m) ŒΩ

lemma arm_zero : arm 0 =·µê[ùîìt] fun _ ‚Ü¶ ‚ü®0, hK‚ü© := by
  have : Nonempty (Fin K) := Fin.pos_iff_nonempty.mp hK
  exact arm_zero_detAlgorithm

lemma arm_ae_eq_etcNextArm (n : ‚Ñï) :
    arm (n + 1) =·µê[ùîìt] fun h ‚Ü¶ nextArm hK m n (fun i ‚Ü¶ h i) := by
  have : Nonempty (Fin K) := Fin.pos_iff_nonempty.mp hK
  exact arm_detAlgorithm_ae_eq n

lemma arm_of_lt {n : ‚Ñï} (hn : n < K * m) :
    arm n =·µê[ùîìt] fun _ ‚Ü¶ ‚ü®n % K, Nat.mod_lt _ hK‚ü© := by
  cases n with
  | zero => exact arm_zero
  | succ n =>
    filter_upwards [arm_ae_eq_etcNextArm n] with h hn_eq
    rw [hn_eq, nextArm, dif_pos]
    grind

lemma arm_mul (hm : m ‚â† 0) :
    have : Nonempty (Fin K) := Fin.pos_iff_nonempty.mp hK
    arm (K * m) =·µê[ùîìt] fun h ‚Ü¶ measurableArgmax (empMean' (K * m - 1)) (fun i ‚Ü¶ h i) := by
  have : K * m = (K * m - 1) + 1 := by
    have : 0 < K * m := Nat.mul_pos hK hm.bot_lt
    grind
  rw [this]
  filter_upwards [arm_ae_eq_etcNextArm (K * m - 1)] with h hn_eq
  rw [hn_eq, nextArm, dif_neg (by simp), dif_pos rfl]
  exact this ‚ñ∏ rfl

lemma arm_add_one_of_ge {n : ‚Ñï} (hm : m ‚â† 0) (hn : K * m ‚â§ n) :
    arm (n + 1) =·µê[ùîìt] fun œâ ‚Ü¶ arm n œâ := by
  filter_upwards [arm_ae_eq_etcNextArm n] with œâ hn_eq
  rw [hn_eq, nextArm, dif_neg (by grind), dif_neg]
  ¬∑ rfl
  ¬∑ have : 0 < K * m := Nat.mul_pos hK hm.bot_lt
    grind

lemma arm_of_ge {n : ‚Ñï} (hm : m ‚â† 0) (hn : K * m ‚â§ n) : arm n =·µê[ùîìt] arm (K * m) := by
  have h_ae n : K * m ‚â§ n ‚Üí arm (n + 1) =·µê[ùîìt] fun œâ ‚Ü¶ arm n œâ := arm_add_one_of_ge hm
  simp_rw [Filter.EventuallyEq, ‚Üê ae_all_iff] at h_ae
  filter_upwards [h_ae] with œâ h_ae
  induction n, hn using Nat.le_induction with
  | base => rfl
  | succ n hmn h_ind => rw [h_ae n hmn, h_ind]

lemma pullCount_mul (a : Fin K) : pullCount a (K * m) =·µê[ùîìt] fun _ ‚Ü¶ m := by
  rw [Filter.EventuallyEq]
  simp_rw [pullCount_eq_sum]
  have h_arm (n : range (K * m)) : arm n =·µê[ùîìt] fun _ ‚Ü¶ ‚ü®n % K, Nat.mod_lt _ hK‚ü© :=
    arm_of_lt (mem_range.mp n.2)
  simp_rw [Filter.EventuallyEq, ‚Üê ae_all_iff] at h_arm
  filter_upwards [h_arm] with œâ h_arm
  have h_arm' {i : ‚Ñï} (hi : i ‚àà range (K * m)) : arm i œâ = ‚ü®i % K, Nat.mod_lt _ hK‚ü© := h_arm ‚ü®i, hi‚ü©
  calc (‚àë s ‚àà range (K * m), if arm s œâ = a then 1 else 0)
  _ = (‚àë s ‚àà range (K * m), if ‚ü®s % K, Nat.mod_lt _ hK‚ü© = a then 1 else 0) :=
    sum_congr rfl fun s hs ‚Ü¶ by rw [h_arm' hs]
  _ = m := by
    sorry

lemma pullCount_add_one_of_ge (a : Fin K) (hm : m ‚â† 0) {n : ‚Ñï} (hn : K * m ‚â§ n) :
    pullCount a (n + 1)
      =·µê[ùîìt] fun œâ ‚Ü¶ pullCount a n œâ + {œâ' | arm (K * m) œâ' = a}.indicator (fun _ ‚Ü¶ 1) œâ := by
  simp_rw [Filter.EventuallyEq, pullCount_add_one]
  filter_upwards [arm_of_ge hm hn] with œâ h_arm
  congr

lemma pullCount_of_ge (a : Fin K) (hm : m ‚â† 0) {n : ‚Ñï} (hn : K * m ‚â§ n) :
    pullCount a n
      =·µê[ùîìt] fun œâ ‚Ü¶ m + (n - K * m) * {œâ' | arm (K * m) œâ' = a}.indicator (fun _ ‚Ü¶ 1) œâ := by
  have h_ae n : K * m ‚â§ n ‚Üí pullCount a (n + 1)
      =·µê[ùîìt] fun œâ ‚Ü¶ pullCount a n œâ + {œâ' | arm (K * m) œâ' = a}.indicator (fun _ ‚Ü¶ 1) œâ :=
    pullCount_add_one_of_ge a hm
  simp_rw [Filter.EventuallyEq, ‚Üê ae_all_iff] at h_ae
  have h_ae_Km : pullCount a (K * m) =·µê[ùîìt] fun _ ‚Ü¶ m := pullCount_mul a
  filter_upwards [h_ae_Km, h_ae] with œâ h_Km h_ae
  induction n, hn using Nat.le_induction with
  | base => simp [h_Km]
  | succ n hmn h_ind =>
    rw [h_ae n hmn, h_ind, add_assoc, ‚Üê add_one_mul]
    congr
    grind

lemma pullCount_add_one_eq_pullCount' {a : Fin K} {n : ‚Ñï} {h : ‚Ñï ‚Üí Fin K √ó ‚Ñù} :
    pullCount a (n + 1) h = pullCount' n (fun i ‚Ü¶ h i) a := by
  rw [pullCount_eq_sum, pullCount'_eq_sum]
  unfold arm
  rw [Finset.sum_coe_sort (f := fun s ‚Ü¶ if (h s).1 = a then 1 else 0) (Iic n)]
  congr with m
  simp only [mem_range, mem_Iic]
  grind

lemma pullCount_eq_pullCount' {a : Fin K} {n : ‚Ñï} {h : ‚Ñï ‚Üí Fin K √ó ‚Ñù} (hn : n ‚â† 0) :
    pullCount a n h = pullCount' (n - 1) (fun i ‚Ü¶ h i) a := by
  cases n with
  | zero => exact absurd rfl hn
  | succ n =>
    rw [pullCount_add_one_eq_pullCount']
    have : n + 1 - 1 = n := by simp
    exact this ‚ñ∏ rfl

lemma sumRewards_add_one_eq_sumRewards' {a : Fin K} {n : ‚Ñï} {h : ‚Ñï ‚Üí Fin K √ó ‚Ñù} :
    sumRewards a (n + 1) h = sumRewards' n (fun i ‚Ü¶ h i) a := by
  unfold sumRewards sumRewards' arm reward
  rw [Finset.sum_coe_sort (f := fun s ‚Ü¶ if (h s).1 = a then (h s).2 else 0) (Iic n)]
  congr with m
  simp only [mem_range, mem_Iic]
  grind

lemma sumRewards_eq_sumRewards' {a : Fin K} {n : ‚Ñï} {h : ‚Ñï ‚Üí Fin K √ó ‚Ñù} (hn : n ‚â† 0) :
    sumRewards a n h = sumRewards' (n - 1) (fun i ‚Ü¶ h i) a := by
  cases n with
  | zero => exact absurd rfl hn
  | succ n =>
    rw [sumRewards_add_one_eq_sumRewards']
    have : n + 1 - 1 = n := by simp
    exact this ‚ñ∏ rfl

lemma empMean_add_one_eq_empMean' {a : Fin K} {n : ‚Ñï} {h : ‚Ñï ‚Üí Fin K √ó ‚Ñù} :
    empMean a (n + 1) h = empMean' n (fun i ‚Ü¶ h i) a := by
  unfold empMean empMean'
  rw [sumRewards_add_one_eq_sumRewards', pullCount_add_one_eq_pullCount']

lemma empMean_eq_empMean' {a : Fin K} {n : ‚Ñï} {h : ‚Ñï ‚Üí Fin K √ó ‚Ñù} (hn : n ‚â† 0) :
    empMean a n h = empMean' (n - 1) (fun i ‚Ü¶ h i) a := by
  unfold empMean empMean'
  rw [sumRewards_eq_sumRewards' hn, pullCount_eq_pullCount' hn]

lemma sumRewards_bestArm_le_of_arm_mul_eq (a : Fin K) (hm : m ‚â† 0) :
    have : Nonempty (Fin K) := Fin.pos_iff_nonempty.mp hK
    ‚àÄ·µê h ‚àÇùîìt, arm (K * m) h = a ‚Üí sumRewards (bestArm ŒΩ) (K * m) h ‚â§ sumRewards a (K * m) h := by
  have : Nonempty (Fin K) := Fin.pos_iff_nonempty.mp hK
  filter_upwards [arm_mul hm, pullCount_mul a, pullCount_mul (bestArm ŒΩ)] with h h_arm ha h_best
    h_eq
  have h_max := isMaxOn_measurableArgmax (empMean' (K * m - 1)) (fun i ‚Ü¶ h i) (bestArm ŒΩ)
  rw [‚Üê h_arm, h_eq] at h_max
  rw [sumRewards_eq_pullCount_mul_empMean, sumRewards_eq_pullCount_mul_empMean, ha, h_best]
  ¬∑ gcongr
    have : 0 < K * m := Nat.mul_pos hK hm.bot_lt
    rwa [empMean_eq_empMean' this.ne', empMean_eq_empMean' this.ne']
  ¬∑ simp [ha, hm]
  ¬∑ simp [h_best, hm]

lemma ae_eq_set_iff {Œ± : Type*} {mŒ± : MeasurableSpace Œ±} {Œº : Measure Œ±} {s t : Set Œ±} :
    s =·µê[Œº] t ‚Üî ‚àÄ·µê a ‚àÇŒº, a ‚àà s ‚Üî a ‚àà t := by
  rw [Filter.EventuallyEq]
  simp only [eq_iff_iff]
  congr!

lemma prob_arm_mul_eq_le (hŒΩ : ‚àÄ a, HasSubgaussianMGF (fun x ‚Ü¶ x - (ŒΩ a)[id]) 1 (ŒΩ a)) (a : Fin K)
    (hm : m ‚â† 0) :
    (ùîìt).real {œâ | arm (K * m) œâ = a} ‚â§ Real.exp (- (m : ‚Ñù) * gap ŒΩ a ^ 2 / 4) := by
  have : Nonempty (Fin K) := Fin.pos_iff_nonempty.mp hK
  have h_pos : 0 < K * m := Nat.mul_pos hK hm.bot_lt
  have h_le : (ùîìt).real {œâ | arm (K * m) œâ = a}
      ‚â§ (ùîìt).real {œâ | sumRewards (bestArm ŒΩ) (K * m) œâ ‚â§ sumRewards a (K * m) œâ} := by
    simp_rw [measureReal_def]
    gcongr 1
    ¬∑ simp
    refine measure_mono_ae ?_
    exact sumRewards_bestArm_le_of_arm_mul_eq a hm
  refine h_le.trans ?_
  -- extend the probability space to include the stream of independent rewards
  suffices (ùîì).real {œâ | sumRewards (bestArm ŒΩ) (K * m) œâ.1 ‚â§ sumRewards a (K * m) œâ.1}
      ‚â§ Real.exp (- (m : ‚Ñù) * gap ŒΩ a ^ 2 / 4) by
    suffices (ùîìt).real {œâ | sumRewards (bestArm ŒΩ) (K * m) œâ ‚â§ sumRewards a (K * m) œâ}
      = (ùîì).real {œâ | sumRewards (bestArm ŒΩ) (K * m) œâ.1 ‚â§ sumRewards a (K * m) œâ.1} by rwa [this]
    calc (ùîìt).real {œâ | sumRewards (bestArm ŒΩ) (K * m) œâ ‚â§ sumRewards a (K * m) œâ}
    _ = ((ùîì).fst).real {œâ | sumRewards (bestArm ŒΩ) (K * m) œâ ‚â§ sumRewards a (K * m) œâ} := by simp
    _ = (ùîì).real {œâ | sumRewards (bestArm ŒΩ) (K * m) œâ.1 ‚â§ sumRewards a (K * m) œâ.1} := by
      rw [Measure.fst, map_measureReal_apply (by fun_prop)]
      ¬∑ rfl
      ¬∑ exact measurableSet_le (by fun_prop) (by fun_prop)
  calc (ùîì).real {œâ | sumRewards (bestArm ŒΩ) (K * m) œâ.1 ‚â§ sumRewards a (K * m) œâ.1}
  _ = (ùîì).real {œâ | ‚àë s ‚àà Icc 1 (pullCount (bestArm ŒΩ) (K * m) œâ.1),
        rewardByCount (bestArm ŒΩ) s œâ.1 œâ.2
      ‚â§ ‚àë s ‚àà Icc 1 (pullCount a (K * m) œâ.1), rewardByCount a s œâ.1 œâ.2} := by
    congr with œâ
    congr! 1 <;> rw [sum_rewardByCount_eq_sumRewards]
  _ = (ùîì).real {œâ | ‚àë s ‚àà Icc 1 m, rewardByCount (bestArm ŒΩ) s œâ.1 œâ.2
      ‚â§ ‚àë s ‚àà Icc 1 m, rewardByCount a s œâ.1 œâ.2} := by
    simp_rw [measureReal_def]
    congr 1
    refine measure_congr ?_
    have ha := pullCount_mul a (hK := hK) (ŒΩ := ŒΩ) (m := m)
    have h_best := pullCount_mul (bestArm ŒΩ) (hK := hK) (ŒΩ := ŒΩ) (m := m)
    rw [ae_eq_set_iff]
    change ‚àÄ·µê œâ ‚àÇ((ùîìt).prod _), _
    rw [Measure.ae_prod_iff_ae_ae]
    ¬∑ filter_upwards [ha, h_best] with œâ ha h_best
      refine ae_of_all _ fun œâ' ‚Ü¶ ?_
      rw [ha, h_best]
    ¬∑ simp only [Set.mem_setOf_eq]
      sorry
  _ = (ùîì).real {œâ | ‚àë s ‚àà range m, œâ.2 s (bestArm ŒΩ) ‚â§ ‚àë s ‚àà range m, œâ.2 s a} := by
    sorry
  _ = (ùîì).real {œâ | m * gap ŒΩ a
      ‚â§ ‚àë s ‚àà range m, ((œâ.2 s a - (ŒΩ a)[id]) - (œâ.2 s (bestArm ŒΩ) - (ŒΩ (bestArm ŒΩ))[id]))} := by
    congr with œâ
    simp only [gap_eq_bestArm_sub, id_eq, sum_sub_distrib, sum_const, card_range, nsmul_eq_mul]
    ring_nf
    simp
  _ = (Bandit.streamMeasure ŒΩ).real {œâ | m * gap ŒΩ a
      ‚â§ ‚àë s ‚àà range m, ((œâ s a - (ŒΩ a)[id]) - (œâ s (bestArm ŒΩ) - (ŒΩ (bestArm ŒΩ))[id]))} := by
    have : Bandit.streamMeasure ŒΩ = (ùîì).map Prod.snd := by rw [‚Üê Measure.snd, Bandit.snd_measure]
    rw [this, measureReal_def, measureReal_def, Measure.map_apply (by fun_prop)]
    ¬∑ rfl
    ¬∑ exact measurableSet_le (by fun_prop) (by fun_prop)
  _ ‚â§ Real.exp (-‚Üëm * gap ŒΩ a ^ 2 / 4) := by
    refine (HasSubgaussianMGF.measure_sum_range_ge_le_of_iIndepFun (c := 2) (Œµ := m * gap ŒΩ a)
      ?_ ?_ ?_).trans_eq ?_
    ¬∑ suffices iIndepFun (fun s œâ ‚Ü¶ œâ s a - œâ s (bestArm ŒΩ)) (Bandit.streamMeasure ŒΩ) by
        sorry
      sorry
    ¬∑ intro i him
      rw [‚Üê one_add_one_eq_two]
      refine HasSubgaussianMGF.sub_of_indepFun ?_ ?_ ?_
      ¬∑ refine (hŒΩ a).congr_identDistrib ?_
        exact (identDistrib_eval_eval_id_streamMeasure _ _ _).symm.sub_const _
      ¬∑ refine (hŒΩ (bestArm ŒΩ)).congr_identDistrib ?_
        exact (identDistrib_eval_eval_id_streamMeasure _ _ _).symm.sub_const _
      ¬∑ suffices IndepFun (fun œâ ‚Ü¶ œâ i a) (fun œâ ‚Ü¶ œâ i (bestArm ŒΩ)) (Bandit.streamMeasure ŒΩ) by
          exact this.comp (œÜ := fun x ‚Ü¶ x - (ŒΩ a)[id]) (œà := fun x ‚Ü¶ x - (ŒΩ (bestArm ŒΩ))[id])
            (by fun_prop) (by fun_prop)
        sorry
    ¬∑ have : 0 ‚â§ gap ŒΩ a := gap_nonneg
      positivity
    ¬∑ congr 1
      field_simp
      simp_rw [mul_assoc]
      simp only [NNReal.coe_ofNat, neg_inj, mul_eq_mul_left_iff, ne_eq, OfNat.ofNat_ne_zero,
        not_false_eq_true, pow_eq_zero_iff]
      norm_num

lemma expectation_pullCount_le (hŒΩ : ‚àÄ a, HasSubgaussianMGF (fun x ‚Ü¶ x - (ŒΩ a)[id]) 1 (ŒΩ a))
    (a : Fin K) (hm : m ‚â† 0) {n : ‚Ñï} (hn : K * m ‚â§ n) :
    ùîìt[fun œâ ‚Ü¶ (pullCount a n œâ : ‚Ñù)]
      ‚â§ m + (n - K * m) * Real.exp (- (m : ‚Ñù) * gap ŒΩ a ^ 2 / 4) := by
  have : (fun œâ ‚Ü¶ (pullCount a n œâ : ‚Ñù))
      =·µê[ùîìt] fun œâ ‚Ü¶ m + (n - K * m) * {œâ' | arm (K * m) œâ' = a}.indicator (fun _ ‚Ü¶ 1) œâ := by
    filter_upwards [pullCount_of_ge a hm hn] with œâ h
    simp only [h, Set.indicator_apply, Set.mem_setOf_eq, mul_ite, mul_one, mul_zero, Nat.cast_add,
      Nat.cast_ite, CharP.cast_eq_zero, add_right_inj]
    norm_cast
  rw [integral_congr_ae this, integral_add (integrable_const _), integral_const_mul]
  swap
  ¬∑ refine Integrable.const_mul ?_ _
    rw [integrable_indicator_iff]
    ¬∑ exact integrableOn_const
    ¬∑ exact (measurableSet_singleton _).preimage (by fun_prop)
  simp only [integral_const, measureReal_univ_eq_one, smul_eq_mul, one_mul, neg_mul,
    add_le_add_iff_left, ge_iff_le]
  gcongr
  ¬∑ norm_cast
    simp
  rw [integral_indicator_const, smul_eq_mul, mul_one]
  ¬∑ rw [‚Üê neg_mul]
    exact prob_arm_mul_eq_le hŒΩ a hm
  ¬∑ exact (measurableSet_singleton _).preimage (by fun_prop)

lemma integrable_pullCount (a : Fin K) (n : ‚Ñï) : Integrable (fun œâ ‚Ü¶ (pullCount a n œâ : ‚Ñù)) ùîìt := by
  refine integrable_of_le_of_le (g‚ÇÅ := 0) (g‚ÇÇ := fun _ ‚Ü¶ n) (by fun_prop)
    (ae_of_all _ fun œâ ‚Ü¶ by simp) (ae_of_all _ fun œâ ‚Ü¶ ?_) (integrable_const _) (integrable_const _)
  simp only [Nat.cast_le]
  exact pullCount_le a n œâ

lemma regret_le (hŒΩ : ‚àÄ a, HasSubgaussianMGF (fun x ‚Ü¶ x - (ŒΩ a)[id]) 1 (ŒΩ a)) (hm : m ‚â† 0)
    (n : ‚Ñï) (hn : K * m ‚â§ n) :
    ùîìt[regret ŒΩ n] ‚â§ ‚àë a, gap ŒΩ a * (m + (n - K * m) * Real.exp (- (m : ‚Ñù) * gap ŒΩ a ^ 2 / 4)) := by
  simp_rw [regret_eq_sum_pullCount_mul_gap]
  rw [integral_finset_sum]
  swap; ¬∑ exact fun i _ ‚Ü¶ (integrable_pullCount i n).mul_const _
  gcongr with a
  rw [mul_comm (gap _ _), integral_mul_const]
  gcongr
  ¬∑ exact gap_nonneg
  ¬∑ exact expectation_pullCount_le hŒΩ a hm hn

end ETC

end Bandits
